// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: did/v1/service.proto

package did

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DID_RegisterURIMapping_FullMethodName = "/did.v1.DID/RegisterURIMapping"
	DID_GetMessageToSign_FullMethodName   = "/did.v1.DID/GetMessageToSign"
	DID_VerifySignature_FullMethodName    = "/did.v1.DID/VerifySignature"
)

// DIDClient is the client API for DID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DIDClient interface {
	RegisterURIMapping(ctx context.Context, in *DIDMappingRequest, opts ...grpc.CallOption) (*DIDMappingResponse, error)
	GetMessageToSign(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error)
}

type dIDClient struct {
	cc grpc.ClientConnInterface
}

func NewDIDClient(cc grpc.ClientConnInterface) DIDClient {
	return &dIDClient{cc}
}

func (c *dIDClient) RegisterURIMapping(ctx context.Context, in *DIDMappingRequest, opts ...grpc.CallOption) (*DIDMappingResponse, error) {
	out := new(DIDMappingResponse)
	err := c.cc.Invoke(ctx, DID_RegisterURIMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDClient) GetMessageToSign(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, DID_GetMessageToSign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDClient) VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error) {
	out := new(VerifySignatureResponse)
	err := c.cc.Invoke(ctx, DID_VerifySignature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DIDServer is the server API for DID service.
// All implementations should embed UnimplementedDIDServer
// for forward compatibility
type DIDServer interface {
	RegisterURIMapping(context.Context, *DIDMappingRequest) (*DIDMappingResponse, error)
	GetMessageToSign(context.Context, *MessageRequest) (*MessageResponse, error)
	VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error)
}

// UnimplementedDIDServer should be embedded to have forward compatible implementations.
type UnimplementedDIDServer struct {
}

func (UnimplementedDIDServer) RegisterURIMapping(context.Context, *DIDMappingRequest) (*DIDMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterURIMapping not implemented")
}
func (UnimplementedDIDServer) GetMessageToSign(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageToSign not implemented")
}
func (UnimplementedDIDServer) VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignature not implemented")
}

// UnsafeDIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DIDServer will
// result in compilation errors.
type UnsafeDIDServer interface {
	mustEmbedUnimplementedDIDServer()
}

func RegisterDIDServer(s grpc.ServiceRegistrar, srv DIDServer) {
	s.RegisterService(&DID_ServiceDesc, srv)
}

func _DID_RegisterURIMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DIDMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDServer).RegisterURIMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DID_RegisterURIMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDServer).RegisterURIMapping(ctx, req.(*DIDMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DID_GetMessageToSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDServer).GetMessageToSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DID_GetMessageToSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDServer).GetMessageToSign(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DID_VerifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDServer).VerifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DID_VerifySignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDServer).VerifySignature(ctx, req.(*VerifySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DID_ServiceDesc is the grpc.ServiceDesc for DID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "did.v1.DID",
	HandlerType: (*DIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterURIMapping",
			Handler:    _DID_RegisterURIMapping_Handler,
		},
		{
			MethodName: "GetMessageToSign",
			Handler:    _DID_GetMessageToSign_Handler,
		},
		{
			MethodName: "VerifySignature",
			Handler:    _DID_VerifySignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "did/v1/service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: followers/v1/service.proto

package followers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowersService_Follow_FullMethodName          = "/followers.v1.FollowersService/Follow"
	FollowersService_Unfollow_FullMethodName        = "/followers.v1.FollowersService/Unfollow"
	FollowersService_ListFollowers_FullMethodName   = "/followers.v1.FollowersService/ListFollowers"
	FollowersService_ListFollowings_FullMethodName  = "/followers.v1.FollowersService/ListFollowings"
	FollowersService_CountFollowers_FullMethodName  = "/followers.v1.FollowersService/CountFollowers"
	FollowersService_CountFollowings_FullMethodName = "/followers.v1.FollowersService/CountFollowings"
	FollowersService_IsFollowing_FullMethodName     = "/followers.v1.FollowersService/IsFollowing"
)

// FollowersServiceClient is the client API for FollowersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowersServiceClient interface {
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unfollow(ctx context.Context, in *UnFollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListFollowers(ctx context.Context, in *ListFollowersRequest, opts ...grpc.CallOption) (*ListFollowersResponse, error)
	ListFollowings(ctx context.Context, in *ListFollowingsRequest, opts ...grpc.CallOption) (*ListFollowingsResponse, error)
	CountFollowers(ctx context.Context, in *CountFollowersRequest, opts ...grpc.CallOption) (*CountFollowersResponse, error)
	CountFollowings(ctx context.Context, in *CountFollowingsRequest, opts ...grpc.CallOption) (*CountFollowingsResponse, error)
	IsFollowing(ctx context.Context, in *IsFollowingRequest, opts ...grpc.CallOption) (*IsFollowingResponse, error)
}

type followersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowersServiceClient(cc grpc.ClientConnInterface) FollowersServiceClient {
	return &followersServiceClient{cc}
}

func (c *followersServiceClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FollowersService_Follow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) Unfollow(ctx context.Context, in *UnFollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FollowersService_Unfollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) ListFollowers(ctx context.Context, in *ListFollowersRequest, opts ...grpc.CallOption) (*ListFollowersResponse, error) {
	out := new(ListFollowersResponse)
	err := c.cc.Invoke(ctx, FollowersService_ListFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) ListFollowings(ctx context.Context, in *ListFollowingsRequest, opts ...grpc.CallOption) (*ListFollowingsResponse, error) {
	out := new(ListFollowingsResponse)
	err := c.cc.Invoke(ctx, FollowersService_ListFollowings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) CountFollowers(ctx context.Context, in *CountFollowersRequest, opts ...grpc.CallOption) (*CountFollowersResponse, error) {
	out := new(CountFollowersResponse)
	err := c.cc.Invoke(ctx, FollowersService_CountFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) CountFollowings(ctx context.Context, in *CountFollowingsRequest, opts ...grpc.CallOption) (*CountFollowingsResponse, error) {
	out := new(CountFollowingsResponse)
	err := c.cc.Invoke(ctx, FollowersService_CountFollowings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) IsFollowing(ctx context.Context, in *IsFollowingRequest, opts ...grpc.CallOption) (*IsFollowingResponse, error) {
	out := new(IsFollowingResponse)
	err := c.cc.Invoke(ctx, FollowersService_IsFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowersServiceServer is the server API for FollowersService service.
// All implementations should embed UnimplementedFollowersServiceServer
// for forward compatibility
type FollowersServiceServer interface {
	Follow(context.Context, *FollowRequest) (*emptypb.Empty, error)
	Unfollow(context.Context, *UnFollowRequest) (*emptypb.Empty, error)
	ListFollowers(context.Context, *ListFollowersRequest) (*ListFollowersResponse, error)
	ListFollowings(context.Context, *ListFollowingsRequest) (*ListFollowingsResponse, error)
	CountFollowers(context.Context, *CountFollowersRequest) (*CountFollowersResponse, error)
	CountFollowings(context.Context, *CountFollowingsRequest) (*CountFollowingsResponse, error)
	IsFollowing(context.Context, *IsFollowingRequest) (*IsFollowingResponse, error)
}

// UnimplementedFollowersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFollowersServiceServer struct {
}

func (UnimplementedFollowersServiceServer) Follow(context.Context, *FollowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedFollowersServiceServer) Unfollow(context.Context, *UnFollowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedFollowersServiceServer) ListFollowers(context.Context, *ListFollowersRequest) (*ListFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowers not implemented")
}
func (UnimplementedFollowersServiceServer) ListFollowings(context.Context, *ListFollowingsRequest) (*ListFollowingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowings not implemented")
}
func (UnimplementedFollowersServiceServer) CountFollowers(context.Context, *CountFollowersRequest) (*CountFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFollowers not implemented")
}
func (UnimplementedFollowersServiceServer) CountFollowings(context.Context, *CountFollowingsRequest) (*CountFollowingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFollowings not implemented")
}
func (UnimplementedFollowersServiceServer) IsFollowing(context.Context, *IsFollowingRequest) (*IsFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFollowing not implemented")
}

// UnsafeFollowersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowersServiceServer will
// result in compilation errors.
type UnsafeFollowersServiceServer interface {
	mustEmbedUnimplementedFollowersServiceServer()
}

func RegisterFollowersServiceServer(s grpc.ServiceRegistrar, srv FollowersServiceServer) {
	s.RegisterService(&FollowersService_ServiceDesc, srv)
}

func _FollowersService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_Unfollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).Unfollow(ctx, req.(*UnFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_ListFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).ListFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_ListFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).ListFollowers(ctx, req.(*ListFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_ListFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).ListFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_ListFollowings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).ListFollowings(ctx, req.(*ListFollowingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_CountFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).CountFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_CountFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).CountFollowers(ctx, req.(*CountFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_CountFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFollowingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).CountFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_CountFollowings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).CountFollowings(ctx, req.(*CountFollowingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_IsFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).IsFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_IsFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).IsFollowing(ctx, req.(*IsFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowersService_ServiceDesc is the grpc.ServiceDesc for FollowersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "followers.v1.FollowersService",
	HandlerType: (*FollowersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _FollowersService_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _FollowersService_Unfollow_Handler,
		},
		{
			MethodName: "ListFollowers",
			Handler:    _FollowersService_ListFollowers_Handler,
		},
		{
			MethodName: "ListFollowings",
			Handler:    _FollowersService_ListFollowings_Handler,
		},
		{
			MethodName: "CountFollowers",
			Handler:    _FollowersService_CountFollowers_Handler,
		},
		{
			MethodName: "CountFollowings",
			Handler:    _FollowersService_CountFollowings_Handler,
		},
		{
			MethodName: "IsFollowing",
			Handler:    _FollowersService_IsFollowing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "followers/v1/service.proto",
}

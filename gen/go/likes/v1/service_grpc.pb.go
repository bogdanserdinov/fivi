// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: likes/v1/service.proto

package pb_likes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_Like_FullMethodName             = "/likes.v1.Service/Like"
	Service_GetNumberOfLikes_FullMethodName = "/likes.v1.Service/GetNumberOfLikes"
	Service_GetLikes_FullMethodName         = "/likes.v1.Service/GetLikes"
	Service_IsLiked_FullMethodName          = "/likes.v1.Service/IsLiked"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// Adds or removes a like.
	Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns number of likes by relation type and id.
	GetNumberOfLikes(ctx context.Context, in *CountPostLikesRequest, opts ...grpc.CallOption) (*CountPostResponse, error)
	// Returns list of likes by relation type and id.
	GetLikes(ctx context.Context, in *GetListByPostRequest, opts ...grpc.CallOption) (*GetLikesByPostResponse, error)
	IsLiked(ctx context.Context, in *IsLikedRequest, opts ...grpc.CallOption) (*IsLikedResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_Like_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetNumberOfLikes(ctx context.Context, in *CountPostLikesRequest, opts ...grpc.CallOption) (*CountPostResponse, error) {
	out := new(CountPostResponse)
	err := c.cc.Invoke(ctx, Service_GetNumberOfLikes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetLikes(ctx context.Context, in *GetListByPostRequest, opts ...grpc.CallOption) (*GetLikesByPostResponse, error) {
	out := new(GetLikesByPostResponse)
	err := c.cc.Invoke(ctx, Service_GetLikes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IsLiked(ctx context.Context, in *IsLikedRequest, opts ...grpc.CallOption) (*IsLikedResponse, error) {
	out := new(IsLikedResponse)
	err := c.cc.Invoke(ctx, Service_IsLiked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations should embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// Adds or removes a like.
	Like(context.Context, *LikeRequest) (*emptypb.Empty, error)
	// Returns number of likes by relation type and id.
	GetNumberOfLikes(context.Context, *CountPostLikesRequest) (*CountPostResponse, error)
	// Returns list of likes by relation type and id.
	GetLikes(context.Context, *GetListByPostRequest) (*GetLikesByPostResponse, error)
	IsLiked(context.Context, *IsLikedRequest) (*IsLikedResponse, error)
}

// UnimplementedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Like(context.Context, *LikeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedServiceServer) GetNumberOfLikes(context.Context, *CountPostLikesRequest) (*CountPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberOfLikes not implemented")
}
func (UnimplementedServiceServer) GetLikes(context.Context, *GetListByPostRequest) (*GetLikesByPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikes not implemented")
}
func (UnimplementedServiceServer) IsLiked(context.Context, *IsLikedRequest) (*IsLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLiked not implemented")
}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Like(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetNumberOfLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPostLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetNumberOfLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetNumberOfLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetNumberOfLikes(ctx, req.(*CountPostLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListByPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetLikes(ctx, req.(*GetListByPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_IsLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).IsLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_IsLiked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).IsLiked(ctx, req.(*IsLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "likes.v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Like",
			Handler:    _Service_Like_Handler,
		},
		{
			MethodName: "GetNumberOfLikes",
			Handler:    _Service_GetNumberOfLikes_Handler,
		},
		{
			MethodName: "GetLikes",
			Handler:    _Service_GetLikes_Handler,
		},
		{
			MethodName: "IsLiked",
			Handler:    _Service_IsLiked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "likes/v1/service.proto",
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: did.sql

package repository

import (
	"context"
)

const createDIDMapping = `-- name: CreateDIDMapping :one
INSERT INTO did_mappings (
    did,
    long_form_uri,
    document
)
VALUES (
    $1,
    $2,
    $3
) RETURNING did, long_form_uri, document, updated_at, created_at
`

type CreateDIDMappingParams struct {
	Did         string `json:"did"`
	LongFormUri string `json:"long_form_uri"`
	Document    []byte `json:"document"`
}

func (q *Queries) CreateDIDMapping(ctx context.Context, arg CreateDIDMappingParams) (DidMapping, error) {
	row := q.queryRow(ctx, q.createDIDMappingStmt, createDIDMapping, arg.Did, arg.LongFormUri, arg.Document)
	var i DidMapping
	err := row.Scan(
		&i.Did,
		&i.LongFormUri,
		&i.Document,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDIDMapping = `-- name: DeleteDIDMapping :exec
DELETE FROM did_mappings
WHERE did = $1
`

func (q *Queries) DeleteDIDMapping(ctx context.Context, did string) error {
	_, err := q.exec(ctx, q.deleteDIDMappingStmt, deleteDIDMapping, did)
	return err
}

const getDIDMapping = `-- name: GetDIDMapping :one
SELECT did, long_form_uri, document, updated_at, created_at
FROM did_mappings
WHERE did = $1
`

func (q *Queries) GetDIDMapping(ctx context.Context, did string) (DidMapping, error) {
	row := q.queryRow(ctx, q.getDIDMappingStmt, getDIDMapping, did)
	var i DidMapping
	err := row.Scan(
		&i.Did,
		&i.LongFormUri,
		&i.Document,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

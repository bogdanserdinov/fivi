// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: did_to_messages.sql

package repository

import (
	"context"
)

const getDIDMessage = `-- name: GetDIDMessage :one
SELECT did, message
FROM did_to_message
WHERE did = $1
`

func (q *Queries) GetDIDMessage(ctx context.Context, did string) (DidToMessage, error) {
	row := q.queryRow(ctx, q.getDIDMessageStmt, getDIDMessage, did)
	var i DidToMessage
	err := row.Scan(&i.Did, &i.Message)
	return i, err
}

const upsertDIDMessage = `-- name: UpsertDIDMessage :exec
INSERT INTO did_to_message (
    did,
    message
)
VALUES (
    $1,
    $2
) ON CONFLICT (did) DO
    UPDATE
    SET message = $2
`

type UpsertDIDMessageParams struct {
	Did     string `json:"did"`
	Message string `json:"message"`
}

func (q *Queries) UpsertDIDMessage(ctx context.Context, arg UpsertDIDMessageParams) error {
	_, err := q.exec(ctx, q.upsertDIDMessageStmt, upsertDIDMessage, arg.Did, arg.Message)
	return err
}

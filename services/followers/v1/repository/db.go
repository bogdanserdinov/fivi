// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countFollowersStmt, err = db.PrepareContext(ctx, countFollowers); err != nil {
		return nil, fmt.Errorf("error preparing query CountFollowers: %w", err)
	}
	if q.countFollowingsStmt, err = db.PrepareContext(ctx, countFollowings); err != nil {
		return nil, fmt.Errorf("error preparing query CountFollowings: %w", err)
	}
	if q.createFollowStmt, err = db.PrepareContext(ctx, createFollow); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFollow: %w", err)
	}
	if q.deleteFollowStmt, err = db.PrepareContext(ctx, deleteFollow); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFollow: %w", err)
	}
	if q.getFollowerStmt, err = db.PrepareContext(ctx, getFollower); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollower: %w", err)
	}
	if q.isFollowUserStmt, err = db.PrepareContext(ctx, isFollowUser); err != nil {
		return nil, fmt.Errorf("error preparing query IsFollowUser: %w", err)
	}
	if q.listFollowersStmt, err = db.PrepareContext(ctx, listFollowers); err != nil {
		return nil, fmt.Errorf("error preparing query ListFollowers: %w", err)
	}
	if q.listFollowingsStmt, err = db.PrepareContext(ctx, listFollowings); err != nil {
		return nil, fmt.Errorf("error preparing query ListFollowings: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countFollowersStmt != nil {
		if cerr := q.countFollowersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFollowersStmt: %w", cerr)
		}
	}
	if q.countFollowingsStmt != nil {
		if cerr := q.countFollowingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFollowingsStmt: %w", cerr)
		}
	}
	if q.createFollowStmt != nil {
		if cerr := q.createFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFollowStmt: %w", cerr)
		}
	}
	if q.deleteFollowStmt != nil {
		if cerr := q.deleteFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFollowStmt: %w", cerr)
		}
	}
	if q.getFollowerStmt != nil {
		if cerr := q.getFollowerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowerStmt: %w", cerr)
		}
	}
	if q.isFollowUserStmt != nil {
		if cerr := q.isFollowUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isFollowUserStmt: %w", cerr)
		}
	}
	if q.listFollowersStmt != nil {
		if cerr := q.listFollowersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFollowersStmt: %w", cerr)
		}
	}
	if q.listFollowingsStmt != nil {
		if cerr := q.listFollowingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFollowingsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	countFollowersStmt  *sql.Stmt
	countFollowingsStmt *sql.Stmt
	createFollowStmt    *sql.Stmt
	deleteFollowStmt    *sql.Stmt
	getFollowerStmt     *sql.Stmt
	isFollowUserStmt    *sql.Stmt
	listFollowersStmt   *sql.Stmt
	listFollowingsStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		countFollowersStmt:  q.countFollowersStmt,
		countFollowingsStmt: q.countFollowingsStmt,
		createFollowStmt:    q.createFollowStmt,
		deleteFollowStmt:    q.deleteFollowStmt,
		getFollowerStmt:     q.getFollowerStmt,
		isFollowUserStmt:    q.isFollowUserStmt,
		listFollowersStmt:   q.listFollowersStmt,
		listFollowingsStmt:  q.listFollowingsStmt,
	}
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: followers.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const countFollowers = `-- name: CountFollowers :one
SELECT COUNT(*)::BIGINT FROM "followers" WHERE "followee_id" = $1
`

func (q *Queries) CountFollowers(ctx context.Context, followeeID string) (int64, error) {
	row := q.queryRow(ctx, q.countFollowersStmt, countFollowers, followeeID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const countFollowings = `-- name: CountFollowings :one
SELECT COUNT(*)::BIGINT FROM "followers" WHERE "follower_id" = $1
`

func (q *Queries) CountFollowings(ctx context.Context, followerID string) (int64, error) {
	row := q.queryRow(ctx, q.countFollowingsStmt, countFollowings, followerID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createFollow = `-- name: CreateFollow :exec
INSERT INTO "followers" (
    "id",
    "follower_id",
    "followee_id"
)
VALUES ($1, $2, $3)
`

type CreateFollowParams struct {
	ID         uuid.UUID `json:"id"`
	FollowerID string    `json:"follower_id"`
	FolloweeID string    `json:"followee_id"`
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) error {
	_, err := q.exec(ctx, q.createFollowStmt, createFollow, arg.ID, arg.FollowerID, arg.FolloweeID)
	return err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM "followers" WHERE "id" = $1
`

func (q *Queries) DeleteFollow(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteFollowStmt, deleteFollow, id)
	return err
}

const isFollowUser = `-- name: IsFollowUser :one
SELECT EXISTS(
               SELECT id, follower_id, followee_id FROM "followers"
               WHERE "follower_id" = $1
                 AND "followee_id" = $2
           )
`

type IsFollowUserParams struct {
	FollowerID string `json:"follower_id"`
	FolloweeID string `json:"followee_id"`
}

func (q *Queries) IsFollowUser(ctx context.Context, arg IsFollowUserParams) (bool, error) {
	row := q.queryRow(ctx, q.isFollowUserStmt, isFollowUser, arg.FollowerID, arg.FolloweeID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listFollowers = `-- name: ListFollowers :many
SELECT id, follower_id FROM "followers" WHERE "followee_id" = $1
`

type ListFollowersRow struct {
	ID         uuid.UUID `json:"id"`
	FollowerID string    `json:"follower_id"`
}

func (q *Queries) ListFollowers(ctx context.Context, followeeID string) ([]ListFollowersRow, error) {
	rows, err := q.query(ctx, q.listFollowersStmt, listFollowers, followeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFollowersRow
	for rows.Next() {
		var i ListFollowersRow
		if err := rows.Scan(&i.ID, &i.FollowerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFollowings = `-- name: ListFollowings :many
SELECT id, followee_id FROM "followers" WHERE "follower_id" = $1
`

type ListFollowingsRow struct {
	ID         uuid.UUID `json:"id"`
	FolloweeID string    `json:"followee_id"`
}

func (q *Queries) ListFollowings(ctx context.Context, followerID string) ([]ListFollowingsRow, error) {
	rows, err := q.query(ctx, q.listFollowingsStmt, listFollowings, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFollowingsRow
	for rows.Next() {
		var i ListFollowingsRow
		if err := rows.Scan(&i.ID, &i.FolloweeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

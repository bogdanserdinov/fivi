// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: likes.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const countPostLikes = `-- name: CountPostLikes :one
SELECT COUNT(*)
FROM likes
WHERE post_id = $1
`

func (q *Queries) CountPostLikes(ctx context.Context, postID uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.countPostLikesStmt, countPostLikes, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes
WHERE post_id = $1 AND user_id = $2
`

type DeleteLikeParams struct {
	PostID uuid.UUID `json:"post_id"`
	UserID string    `json:"user_id"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.exec(ctx, q.deleteLikeStmt, deleteLike, arg.PostID, arg.UserID)
	return err
}

const like = `-- name: Like :exec
INSERT INTO likes(post_id, user_id)
VALUES($1, $2)
`

type LikeParams struct {
	PostID uuid.UUID `json:"post_id"`
	UserID string    `json:"user_id"`
}

func (q *Queries) Like(ctx context.Context, arg LikeParams) error {
	_, err := q.exec(ctx, q.likeStmt, like, arg.PostID, arg.UserID)
	return err
}

const listLikes = `-- name: ListLikes :many
SELECT post_id, user_id
FROM likes
WHERE post_id = $1
`

func (q *Queries) ListLikes(ctx context.Context, postID uuid.UUID) ([]Like, error) {
	rows, err := q.query(ctx, q.listLikesStmt, listLikes, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(&i.PostID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

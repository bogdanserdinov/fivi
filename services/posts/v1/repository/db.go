// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createPostsStmt, err = db.PrepareContext(ctx, createPosts); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePosts: %w", err)
	}
	if q.deletePostStmt, err = db.PrepareContext(ctx, deletePost); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePost: %w", err)
	}
	if q.getStmt, err = db.PrepareContext(ctx, get); err != nil {
		return nil, fmt.Errorf("error preparing query Get: %w", err)
	}
	if q.listUserPostsStmt, err = db.PrepareContext(ctx, listUserPosts); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserPosts: %w", err)
	}
	if q.listUsersPostsStmt, err = db.PrepareContext(ctx, listUsersPosts); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsersPosts: %w", err)
	}
	if q.updatePostStmt, err = db.PrepareContext(ctx, updatePost); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePost: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createPostsStmt != nil {
		if cerr := q.createPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostsStmt: %w", cerr)
		}
	}
	if q.deletePostStmt != nil {
		if cerr := q.deletePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostStmt: %w", cerr)
		}
	}
	if q.getStmt != nil {
		if cerr := q.getStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStmt: %w", cerr)
		}
	}
	if q.listUserPostsStmt != nil {
		if cerr := q.listUserPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserPostsStmt: %w", cerr)
		}
	}
	if q.listUsersPostsStmt != nil {
		if cerr := q.listUsersPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersPostsStmt: %w", cerr)
		}
	}
	if q.updatePostStmt != nil {
		if cerr := q.updatePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db DBTX
	tx *sql.Tx
	createPostsStmt    *sql.Stmt
	deletePostStmt     *sql.Stmt
	getStmt            *sql.Stmt
	listUserPostsStmt  *sql.Stmt
	listUsersPostsStmt *sql.Stmt
	updatePostStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createPostsStmt:    q.createPostsStmt,
		deletePostStmt:     q.deletePostStmt,
		getStmt:            q.getStmt,
		listUserPostsStmt:  q.listUserPostsStmt,
		listUsersPostsStmt: q.listUsersPostsStmt,
		updatePostStmt:     q.updatePostStmt,
	}
}

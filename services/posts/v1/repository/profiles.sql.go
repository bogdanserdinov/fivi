// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: profiles.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPosts = `-- name: CreatePosts :exec
INSERT INTO posts(id, payload, creator_id)
VALUES ($1, $2, $3)
`

type CreatePostsParams struct {
	ID        uuid.UUID `json:"id"`
	Payload   string    `json:"payload"`
	CreatorID uuid.UUID `json:"creator_id"`
}

func (q *Queries) CreatePosts(ctx context.Context, arg CreatePostsParams) error {
	_, err := q.exec(ctx, q.createPostsStmt, createPosts, arg.ID, arg.Payload, arg.CreatorID)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deletePostStmt, deletePost, id)
	return err
}

const get = `-- name: Get :one
SELECT id, payload, creator_id, created_at
FROM posts
WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.queryRow(ctx, q.getStmt, get, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Payload,
		&i.CreatorID,
		&i.CreatedAt,
	)
	return i, err
}

const listUserPosts = `-- name: ListUserPosts :many
SELECT id, payload, creator_id, created_at
FROM posts
WHERE creator_id = $1
`

func (q *Queries) ListUserPosts(ctx context.Context, creatorID uuid.UUID) ([]Post, error) {
	rows, err := q.query(ctx, q.listUserPostsStmt, listUserPosts, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Payload,
			&i.CreatorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersPosts = `-- name: ListUsersPosts :many
SELECT id, payload, creator_id, created_at
FROM posts
WHERE creator_id = ANY($1::uuid[])
`

func (q *Queries) ListUsersPosts(ctx context.Context, creatorID []uuid.UUID) ([]Post, error) {
	rows, err := q.query(ctx, q.listUsersPostsStmt, listUsersPosts, pq.Array(creatorID))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Payload,
			&i.CreatorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts
SET payload = $1
WHERE id = $2
`

type UpdatePostParams struct {
	Payload string    `json:"payload"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.exec(ctx, q.updatePostStmt, updatePost, arg.Payload, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: profiles.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO profiles(id, name, username, mnemonic)
VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Username string    `json:"username"`
	Mnemonic string    `json:"mnemonic"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Mnemonic,
	)
	return err
}

const getByUsername = `-- name: GetByUsername :one
SELECT id, name, username, mnemonic
FROM profiles
WHERE username = $1
`

type GetByUsernameRow struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Username string    `json:"username"`
	Mnemonic string    `json:"mnemonic"`
}

func (q *Queries) GetByUsername(ctx context.Context, username string) (GetByUsernameRow, error) {
	row := q.queryRow(ctx, q.getByUsernameStmt, getByUsername, username)
	var i GetByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Mnemonic,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, username
FROM profiles
WHERE id = $1
`

type GetUserRow struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Username string    `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Username)
	return i, err
}

const listUserIDsWithName = `-- name: ListUserIDsWithName :many
SELECT id, name, username
FROM profiles
WHERE username ILIKE $1 || '%'
`

type ListUserIDsWithNameRow struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Username string    `json:"username"`
}

func (q *Queries) ListUserIDsWithName(ctx context.Context, username sql.NullString) ([]ListUserIDsWithNameRow, error) {
	rows, err := q.query(ctx, q.listUserIDsWithNameStmt, listUserIDsWithName, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserIDsWithNameRow
	for rows.Next() {
		var i ListUserIDsWithNameRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE profiles
SET name = $1, username = $2
WHERE id = $3
`

type UpdateUserParams struct {
	Name     string    `json:"name"`
	Username string    `json:"username"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser, arg.Name, arg.Username, arg.ID)
	return err
}
